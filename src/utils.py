import pandas as pd
import datetime
import os
import logging
from typing import Union, Optional

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# üìÜ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
def get_last_three_months_range(date: Optional[str] = None) -> tuple:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏–ª–∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.

    :param date: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'. –ï—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞.
    :return: –ö–æ—Ä—Ç–µ–∂ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–∞–º–∏.
    """
    if date:
        current_date = pd.to_datetime(date)
    else:
        current_date = pd.Timestamp.now()

    start_date = current_date - pd.DateOffset(months=3)
    return start_date, current_date


# üõ°Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞—Ç–∞–º–∏
def ensure_datetime_column(df: pd.DataFrame, column: str) -> pd.DataFrame:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –≤ datetime.

    :param df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏.
    :param column: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
    :return: DataFrame —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º.
    """
    if column in df.columns:
        df[column] = pd.to_datetime(df[column], errors='coerce')
        logger.info(f"–°—Ç–æ–ª–±–µ—Ü '{column}' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ datetime.")
    else:
        logger.error(f"–°—Ç–æ–ª–±–µ—Ü '{column}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DataFrame.")
        raise KeyError(f"–°—Ç–æ–ª–±–µ—Ü '{column}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return df


# üìÅ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
def ensure_directory_exists(path: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞, –∏ —Å–æ–∑–¥–∞–µ—Ç –µ—ë, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.

    :param path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ.
    """
    if not os.path.exists(path):
        os.makedirs(path)
        logger.info(f"–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {path}")
    else:
        logger.info(f"–ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")


# üìä –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–µ—à–±—ç–∫–∞ –ø–æ —Å—É–º–º–µ –æ–ø–µ—Ä–∞—Ü–∏–π
def calculate_cashback(amount: float, rate: float = 0.01) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–µ—à–±—ç–∫ –ø–æ —Å—É–º–º–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.

    :param amount: –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    :param rate: –ü—Ä–æ—Ü–µ–Ω—Ç –∫–µ—à–±—ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1%).
    :return: –°—É–º–º–∞ –∫–µ—à–±—ç–∫–∞.
    """
    cashback = round(amount * rate, 2)
    logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω –∫–µ—à–±—ç–∫: {cashback} –¥–ª—è —Å—É–º–º—ã: {amount}")
    return cashback


# üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def filter_transactions_by_category(df: pd.DataFrame, category: str) -> pd.DataFrame:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    :param df: DataFrame —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    :param category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    :return: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.
    """
    filtered_df = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]
    logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_df)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
    return filtered_df


def load_transactions(file_path: str) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–∑ Excel-—Ñ–∞–π–ª–∞.
    """
    return pd.read_excel(file_path)


def save_json():
    pass


def configure_logging():
    pass