import pandas as pd
from typing import Dict, List, Any, Optional
import datetime
import logging
import re

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

#  –ê–Ω–∞–ª–∏–∑ –≤—ã–≥–æ–¥–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ –∫–µ—à–±—ç–∫–∞
def analyze_cashback_categories(data: pd.DataFrame, year: Optional[int] = None, month: Optional[int] = None) -> Dict[str, float]:
    """
    –ê–Ω–∞–ª–∏–∑ –≤—ã–≥–æ–¥–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ –∫–µ—à–±—ç–∫–∞.
    """
    # –£–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dayfirst=True, –µ—Å–ª–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥
    data['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'] = pd.to_datetime(data['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'], format='%d.%m.%Y %H:%M:%S', errors='coerce', dayfirst=True)

    if year and month:
        # –ê–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü –∏ –≥–æ–¥
        filtered_data = data[
            (data['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'].dt.year == year) &
            (data['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'].dt.month == month)
        ]
    else:
        # –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞)
        filtered_data = data

    if filtered_data.empty:
        return {}

    cashback_by_category = (
        filtered_data.groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')['–ö—ç—à–±—ç–∫']
        .sum()
        .sort_values(ascending=False)
    ).to_dict()

    return cashback_by_category

# üè¶ –ò–Ω–≤–µ—Å—Ç–∫–æ–ø–∏–ª–∫–∞
def investment_bank(month: str, transactions: List[Dict[str, Any]], limit: int) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç–ª–æ–∂–∏—Ç—å –≤ ¬´–ò–Ω–≤–µ—Å—Ç–∫–æ–ø–∏–ª–∫—É¬ª.
    """
    month_date = datetime.datetime.strptime(month, "%Y-%m")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Å—è—Ü –≤ datetime

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –º–µ—Å—è—Ü—É
    filtered_transactions = [
        txn for txn in transactions
        if pd.to_datetime(txn['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏']).year == month_date.year and  # –ò—Å–ø–æ–ª—å–∑—É–µ–º pd.to_datetime
           pd.to_datetime(txn['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏']).month == month_date.month  # –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
    ]

    # –†–∞—Å—Å—á–µ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    total_saved = sum(
        (limit - (txn['–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'] % limit)) % limit
        for txn in filtered_transactions
    )

    return total_saved


# üîç –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
def simple_search(transactions: pd.DataFrame, query: str) -> List[Dict[str, Any]]:
    """
    –ò—â–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    filtered_transactions = transactions[
        transactions['–û–ø–∏—Å–∞–Ω–∏–µ'].str.contains(query, case=False, na=False) |
        transactions['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].str.contains(query, case=False, na=False)
    ]

    return filtered_transactions.to_dict('records')


# üì± –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º
def search_phone_numbers(transactions: pd.DataFrame) -> List[Dict[str, Any]]:
    """
    –ò—â–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.
    """
    phone_pattern = r'\+7 \d{3} \d{2}-\d{2}-\d{2}|\+7 \d{3} \d{3}-\d{2}-\d{2}'
    filtered_transactions = transactions[
        transactions['–û–ø–∏—Å–∞–Ω–∏–µ'].str.contains(phone_pattern, regex=True, na=False)
    ]

    return filtered_transactions.to_dict('records')


# üë§ –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–∞–º
def search_personal_transfers(transactions: pd.DataFrame) -> List[Dict[str, Any]]:
    """
    –ò—â–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–∞–º.
    """
    filtered_transactions = transactions[
        (transactions['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == "–ü–µ—Ä–µ–≤–æ–¥—ã") &
        transactions['–û–ø–∏—Å–∞–Ω–∏–µ'].str.contains(r'\b[A-–Ø–Å][–∞-—è—ë]+\s[A-–Ø–Å]\.', regex=True, na=False)
    ]

    return filtered_transactions.to_dict('records')
